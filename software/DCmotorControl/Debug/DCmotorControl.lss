
DCmotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000002f0  2**0
                  ALLOC
  2 .stab         000006f0  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008d1  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "dioavrRegisters.h"
static uint8 g_motorSpeedlvl=0;
extern bool g_interrupt_flag;

int main(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	//Initialize the external interrupt 0 and the pwm mode in timer 0
	Init_pwm_timer0();
  84:	0e 94 c9 00 	call	0x192	; 0x192 <Init_pwm_timer0>
	Init_external_interrupt0();
  88:	0e 94 df 00 	call	0x1be	; 0x1be <Init_external_interrupt0>
	// We cleared pins , PA1 AND PA2 in DDRA_REG register TO BE INPUT BINS PA1 AND PA2 TO CONTROL THE DC MOTOR DIRECTION
	DDRA_REG.BITS.BIT1 =LOW ;
  8c:	ea e3       	ldi	r30, 0x3A	; 58
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	80 83       	st	Z, r24
	DDRA_REG.BITS.BIT2 =LOW;
  96:	ea e3       	ldi	r30, 0x3A	; 58
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8b 7f       	andi	r24, 0xFB	; 251
  9e:	80 83       	st	Z, r24
	// WE SET PC0 , PC1 , PC2 AND PC3 TO BE OUTPUT PINS TO DISPLAY THE DC MOTOR SPEED LVL ON 7 SEGMENT
	DDRC_REG.data |=0X0f;
  a0:	a4 e3       	ldi	r26, 0x34	; 52
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e4 e3       	ldi	r30, 0x34	; 52
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 60       	ori	r24, 0x0F	; 15
  ac:	8c 93       	st	X, r24
	PORTC_REG.data &=0Xf0;
  ae:	a5 e3       	ldi	r26, 0x35	; 53
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e5 e3       	ldi	r30, 0x35	; 53
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	8c 93       	st	X, r24
	// SET PD0 AND PD1 TO BE OUTPUT PINS TO CONTROL THE DIRECTION OF DC MOTOR
	DDRD_REG.BITS.BIT0=HIGH;
  bc:	e1 e3       	ldi	r30, 0x31	; 49
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	80 83       	st	Z, r24
	DDRD_REG.BITS.BIT1=HIGH;
  c6:	e1 e3       	ldi	r30, 0x31	; 49
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24

	while(1)
	{
		if(PINA_REG.BITS.BIT0==HIGH)
  d0:	e9 e3       	ldi	r30, 0x39	; 57
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	81 70       	andi	r24, 0x01	; 1
  d8:	88 23       	and	r24, r24
  da:	59 f0       	breq	.+22     	; 0xf2 <main+0x76>
		{
			PORTD_REG.BITS.BIT0 =HIGH;
  dc:	e2 e3       	ldi	r30, 0x32	; 50
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	81 60       	ori	r24, 0x01	; 1
  e4:	80 83       	st	Z, r24
			PORTD_REG.BITS.BIT1 =LOW;
  e6:	e2 e3       	ldi	r30, 0x32	; 50
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
  f0:	10 c0       	rjmp	.+32     	; 0x112 <main+0x96>
		}
		else if(PINA_REG.BITS.BIT1==HIGH)
  f2:	e9 e3       	ldi	r30, 0x39	; 57
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 70       	andi	r24, 0x02	; 2
  fa:	88 23       	and	r24, r24
  fc:	51 f0       	breq	.+20     	; 0x112 <main+0x96>
		{
			PORTD_REG.BITS.BIT1 =HIGH;
  fe:	e2 e3       	ldi	r30, 0x32	; 50
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	82 60       	ori	r24, 0x02	; 2
 106:	80 83       	st	Z, r24
			PORTD_REG.BITS.BIT0 =LOW;
 108:	e2 e3       	ldi	r30, 0x32	; 50
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8e 7f       	andi	r24, 0xFE	; 254
 110:	80 83       	st	Z, r24
		}
		// this code will be implemented when the interrupt request happen.
		if(g_interrupt_flag==HIGH)
 112:	80 91 61 00 	lds	r24, 0x0061
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	d9 f6       	brne	.-74     	; 0xd0 <main+0x54>
		{
			if(g_motorSpeedlvl==9)
 11a:	80 91 60 00 	lds	r24, 0x0060
 11e:	89 30       	cpi	r24, 0x09	; 9
 120:	49 f4       	brne	.+18     	; 0x134 <main+0xb8>
			{
				g_motorSpeedlvl=0;
 122:	10 92 60 00 	sts	0x0060, r1
				PORTC_REG.data &=0XF0;
 126:	a5 e3       	ldi	r26, 0x35	; 53
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	e5 e3       	ldi	r30, 0x35	; 53
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	8c 93       	st	X, r24
			}
			g_motorSpeedlvl++;
 134:	80 91 60 00 	lds	r24, 0x0060
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	80 93 60 00 	sts	0x0060, r24
			OCR0=(255*g_motorSpeedlvl)/9;
 13e:	ec e5       	ldi	r30, 0x5C	; 92
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	48 2f       	mov	r20, r24
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	ca 01       	movw	r24, r20
 14c:	9c 01       	movw	r18, r24
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	c9 01       	movw	r24, r18
 154:	96 95       	lsr	r25
 156:	98 2f       	mov	r25, r24
 158:	88 27       	eor	r24, r24
 15a:	97 95       	ror	r25
 15c:	87 95       	ror	r24
 15e:	82 1b       	sub	r24, r18
 160:	93 0b       	sbc	r25, r19
 162:	84 0f       	add	r24, r20
 164:	95 1f       	adc	r25, r21
 166:	29 e0       	ldi	r18, 0x09	; 9
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	0e 94 15 01 	call	0x22a	; 0x22a <__divmodhi4>
 170:	cb 01       	movw	r24, r22
 172:	80 83       	st	Z, r24
			PORTC_REG.data = (PORTC_REG.data& 0XF0)|(g_motorSpeedlvl & 0X0F);
 174:	a5 e3       	ldi	r26, 0x35	; 53
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	e5 e3       	ldi	r30, 0x35	; 53
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	98 2f       	mov	r25, r24
 180:	90 7f       	andi	r25, 0xF0	; 240
 182:	80 91 60 00 	lds	r24, 0x0060
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	89 2b       	or	r24, r25
 18a:	8c 93       	st	X, r24
			g_interrupt_flag=LOW;
 18c:	10 92 61 00 	sts	0x0061, r1
 190:	9f cf       	rjmp	.-194    	; 0xd0 <main+0x54>

00000192 <Init_pwm_timer0>:
#include<avr/interrupt.h>
 bool g_interrupt_flag;

// first function to initialize the fast PWM mode in atmega16 to control the speed of DC motor
void Init_pwm_timer0(void)
{
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	 * WGM00 AND WGM01 ARE SET TO CHOOSE FAST PWM MODE
	 * COM01 IS SET AND COM00 IS CLEARED TO CHOOSE NON-INVERTING MODE
	 * CS01 IS SET AND CS00 AND CS02 ARE CLEARED TO CHOOSE PRESCALER =8
	 * THE PWM FREQUENCY IS 488 HZ = (1MHZ/(256*8))
	 */
	TCCR0 =(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
 19a:	e3 e5       	ldi	r30, 0x53	; 83
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	8a e6       	ldi	r24, 0x6A	; 106
 1a0:	80 83       	st	Z, r24
	// Initial value for TCNT0 register =0 to start count from 0;
	TCNT0 =0;
 1a2:	e2 e5       	ldi	r30, 0x52	; 82
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	10 82       	st	Z, r1
	// Initial value for OCR0 register =0,THIS REGISTER WILL BE SET BY THE USER TO CONTROL SPEED OF DC MOTOR
	OCR0=0;
 1a8:	ec e5       	ldi	r30, 0x5C	; 92
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	10 82       	st	Z, r1
    // PIN (PB3) OR (OC0) IS SET TO BE OUTPUT PIN TO CONTROL THE SPEED OF DC MOTOR
	DDRB_REG.BITS.BIT3 = HIGH;
 1ae:	e7 e3       	ldi	r30, 0x37	; 55
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 60       	ori	r24, 0x08	; 8
 1b6:	80 83       	st	Z, r24
	
}
 1b8:	cf 91       	pop	r28
 1ba:	df 91       	pop	r29
 1bc:	08 95       	ret

000001be <Init_external_interrupt0>:
 * the user can change the value of the register in ten lvls from 0 to 9  by pushing the button that connected
 * to external interrupt0  every push increment the lvl of the dc motor speed ,
 * the lvl of dc motor speed will be displayed on a 7 segment
 */
void Init_external_interrupt0(void)
{
 1be:	df 93       	push	r29
 1c0:	cf 93       	push	r28
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	// TO ENABLE GLOBAL INTERRUPT FLAG (I-BIT)
	SREG |=(1<<7);
 1c6:	af e5       	ldi	r26, 0x5F	; 95
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	ef e5       	ldi	r30, 0x5F	; 95
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8c 93       	st	X, r24
	// THE ISC00 AND ISC01  BITS AER SET TO 1 TO GENERATE THE INTERRUPT AT RISING EDGE.
	MCUCR |=(1<<ISC00)|(1<<ISC01);
 1d4:	a5 e5       	ldi	r26, 0x55	; 85
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	e5 e5       	ldi	r30, 0x55	; 85
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	83 60       	ori	r24, 0x03	; 3
 1e0:	8c 93       	st	X, r24
	// IS SET TO ENABLE INTERRUPT FLAG OF EXTERNAL INTERRUPT0.
	GICR |=(1<<INT0);
 1e2:	ab e5       	ldi	r26, 0x5B	; 91
 1e4:	b0 e0       	ldi	r27, 0x00	; 0
 1e6:	eb e5       	ldi	r30, 0x5B	; 91
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	80 81       	ld	r24, Z
 1ec:	80 64       	ori	r24, 0x40	; 64
 1ee:	8c 93       	st	X, r24
	// CLearing pin PB0 To make it input form external interrupt 0 to control the speed of DC MOTOR
	DDRD_REG.BITS.BIT2=LOW;
 1f0:	e1 e3       	ldi	r30, 0x31	; 49
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	80 83       	st	Z, r24
	

}
 1fa:	cf 91       	pop	r28
 1fc:	df 91       	pop	r29
 1fe:	08 95       	ret

00000200 <__vector_1>:

// the ISR implementation when external interrupt  requested if the user push the botton
ISR(INT0_vect)
{
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	8f 93       	push	r24
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
	g_interrupt_flag=HIGH;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 61 00 	sts	0x0061, r24
}
 21a:	cf 91       	pop	r28
 21c:	df 91       	pop	r29
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <__divmodhi4>:
 22a:	97 fb       	bst	r25, 7
 22c:	09 2e       	mov	r0, r25
 22e:	07 26       	eor	r0, r23
 230:	0a d0       	rcall	.+20     	; 0x246 <__divmodhi4_neg1>
 232:	77 fd       	sbrc	r23, 7
 234:	04 d0       	rcall	.+8      	; 0x23e <__divmodhi4_neg2>
 236:	0c d0       	rcall	.+24     	; 0x250 <__udivmodhi4>
 238:	06 d0       	rcall	.+12     	; 0x246 <__divmodhi4_neg1>
 23a:	00 20       	and	r0, r0
 23c:	1a f4       	brpl	.+6      	; 0x244 <__divmodhi4_exit>

0000023e <__divmodhi4_neg2>:
 23e:	70 95       	com	r23
 240:	61 95       	neg	r22
 242:	7f 4f       	sbci	r23, 0xFF	; 255

00000244 <__divmodhi4_exit>:
 244:	08 95       	ret

00000246 <__divmodhi4_neg1>:
 246:	f6 f7       	brtc	.-4      	; 0x244 <__divmodhi4_exit>
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	08 95       	ret

00000250 <__udivmodhi4>:
 250:	aa 1b       	sub	r26, r26
 252:	bb 1b       	sub	r27, r27
 254:	51 e1       	ldi	r21, 0x11	; 17
 256:	07 c0       	rjmp	.+14     	; 0x266 <__udivmodhi4_ep>

00000258 <__udivmodhi4_loop>:
 258:	aa 1f       	adc	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	a6 17       	cp	r26, r22
 25e:	b7 07       	cpc	r27, r23
 260:	10 f0       	brcs	.+4      	; 0x266 <__udivmodhi4_ep>
 262:	a6 1b       	sub	r26, r22
 264:	b7 0b       	sbc	r27, r23

00000266 <__udivmodhi4_ep>:
 266:	88 1f       	adc	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	5a 95       	dec	r21
 26c:	a9 f7       	brne	.-22     	; 0x258 <__udivmodhi4_loop>
 26e:	80 95       	com	r24
 270:	90 95       	com	r25
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
